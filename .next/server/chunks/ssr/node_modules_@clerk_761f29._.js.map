{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@clerk/nextjs/src/runtime/node/safe-node-apis.js"],"sourcesContent":["/**\n * This file is used for conditional imports to mitigate bundling issues with Next.js server actions on version prior to 14.1.0.\n */\nconst { existsSync, writeFileSync, readFileSync, appendFileSync, mkdirSync, rmSync } = require('node:fs');\nconst path = require('node:path');\nconst fs = {\n  existsSync,\n  writeFileSync,\n  readFileSync,\n  appendFileSync,\n  mkdirSync,\n  rmSync,\n};\n\nmodule.exports = { fs, path };\n"],"names":[],"mappings":";;;;;;AAAA,IAAA,yBAAA,CAAA,GAAA,qKAAA,CAAA,aAAA,EAAA;IAAA,sCAAA,OAAA,EAAA,MAAA;QAGA,MAAM,EAAE,UAAA,EAAY,aAAA,EAAe,YAAA,EAAc,cAAA,EAAgB,SAAA,EAAW,MAAA,EAAO;QACnF,MAAM;QACN,MAAM,KAAK;YACT;YACA;YACA;YACA;YACA;YACA;QACF;QAEA,OAAO,OAAA,GAAU;YAAE;YAAI;QAAK;IAAA;AAAA"}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@clerk/shared/src/telemetry/events/method-called.ts"],"sourcesContent":["import type { TelemetryEventRaw } from '@clerk/types';\n\nconst EVENT_METHOD_CALLED = 'METHOD_CALLED' as const;\n\ntype EventMethodCalled = {\n  method: string;\n} & Record<string, string | number | boolean>;\n\n/**\n * Fired when a helper method is called from a Clerk SDK.\n */\nexport function eventMethodCalled(\n  method: string,\n  payload?: Record<string, unknown>,\n): TelemetryEventRaw<EventMethodCalled> {\n  return {\n    event: EVENT_METHOD_CALLED,\n    payload: {\n      method,\n      ...payload,\n    },\n  };\n}\n"],"names":[],"mappings":";;;;AAEA,IAAM,sBAAsB;AASrB,SAAS,kBACd,MAAA,EACA,OAAA;IAEA,OAAO;QACL,OAAO;QACP,SAAS;YACP;YACA,GAAG,OAAA;QACL;IACF;AACF"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@clerk/shared/src/telemetry/throttler.ts","/turbopack/[project]/node_modules/@clerk/shared/src/telemetry/collector.ts","/turbopack/[project]/node_modules/@clerk/shared/src/telemetry/events/component-mounted.ts"],"sourcesContent":["import type { TelemetryEvent } from '@clerk/types';\n\ntype TtlInMilliseconds = number;\n\nconst DEFAULT_CACHE_TTL_MS = 86400000; // 24 hours\n\n/**\n * Manages throttling for telemetry events using the browser's localStorage to\n * mitigate event flooding in frequently executed code paths.\n */\nexport class TelemetryEventThrottler {\n  #storageKey = 'clerk_telemetry_throttler';\n  #cacheTtl = DEFAULT_CACHE_TTL_MS;\n\n  isEventThrottled(payload: TelemetryEvent): boolean {\n    if (!this.#isValidBrowser) {\n      return false;\n    }\n\n    const now = Date.now();\n    const key = this.#generateKey(payload);\n    const entry = this.#cache?.[key];\n\n    if (!entry) {\n      const updatedCache = {\n        ...this.#cache,\n        [key]: now,\n      };\n\n      localStorage.setItem(this.#storageKey, JSON.stringify(updatedCache));\n    }\n\n    const shouldInvalidate = entry && now - entry > this.#cacheTtl;\n    if (shouldInvalidate) {\n      const updatedCache = this.#cache;\n      delete updatedCache[key];\n\n      localStorage.setItem(this.#storageKey, JSON.stringify(updatedCache));\n    }\n\n    return !!entry;\n  }\n\n  /**\n   * Generates a consistent unique key for telemetry events by sorting payload properties.\n   * This ensures that payloads with identical content in different orders produce the same key.\n   */\n  #generateKey(event: TelemetryEvent): string {\n    const { sk: _sk, pk: _pk, payload, ...rest } = event;\n\n    const sanitizedEvent = {\n      ...payload,\n      ...rest,\n    };\n\n    return JSON.stringify(\n      Object.keys({\n        ...payload,\n        ...rest,\n      })\n        .sort()\n        .map(key => sanitizedEvent[key]),\n    );\n  }\n\n  get #cache(): Record<string, TtlInMilliseconds> | undefined {\n    const cacheString = localStorage.getItem(this.#storageKey);\n\n    if (!cacheString) {\n      return {};\n    }\n\n    return JSON.parse(cacheString);\n  }\n\n  /**\n   * Checks if the browser's localStorage is supported and writable.\n   *\n   * If any of these operations fail, it indicates that localStorage is either\n   * not supported or not writable (e.g., in cases where the storage is full or\n   * the browser is in a privacy mode that restricts localStorage usage).\n   */\n  get #isValidBrowser(): boolean {\n    if (typeof window === 'undefined') {\n      return false;\n    }\n\n    const storage = window.localStorage;\n    if (!storage) {\n      return false;\n    }\n\n    try {\n      const testKey = 'test';\n      storage.setItem(testKey, testKey);\n      storage.removeItem(testKey);\n\n      return true;\n    } catch (err: unknown) {\n      const isQuotaExceededError =\n        err instanceof DOMException &&\n        // Check error names for different browsers\n        (err.name === 'QuotaExceededError' || err.name === 'NS_ERROR_DOM_QUOTA_REACHED');\n\n      if (isQuotaExceededError && storage.length > 0) {\n        storage.removeItem(this.#storageKey);\n      }\n\n      return false;\n    }\n  }\n}\n","/**\n * The `TelemetryCollector` class handles collection of telemetry events from Clerk SDKs. Telemetry is opt-out and can be disabled by setting a CLERK_TELEMETRY_DISABLED environment variable.\n * The `ClerkProvider` also accepts a `telemetry` prop that will be passed to the collector during initialization:\n *\n * ```jsx\n * <ClerkProvider telemetry={false}>\n *    ...\n * </ClerkProvider>\n * ```\n *\n * For more information, please see the telemetry documentation page: https://clerk.com/docs/telemetry\n */\nimport type {\n  InstanceType,\n  TelemetryCollector as TelemetryCollectorInterface,\n  TelemetryEvent,\n  TelemetryEventRaw,\n} from '@clerk/types';\n\nimport { parsePublishableKey } from '../keys';\nimport { isTruthy } from '../underscore';\nimport { TelemetryEventThrottler } from './throttler';\nimport type { TelemetryCollectorOptions } from './types';\n\ntype TelemetryCollectorConfig = Pick<\n  TelemetryCollectorOptions,\n  'samplingRate' | 'disabled' | 'debug' | 'maxBufferSize'\n> & {\n  endpoint: string;\n};\n\ntype TelemetryMetadata = Required<\n  Pick<TelemetryCollectorOptions, 'clerkVersion' | 'sdk' | 'sdkVersion' | 'publishableKey' | 'secretKey'>\n> & {\n  /**\n   * The instance type, derived from the provided publishableKey.\n   */\n  instanceType: InstanceType;\n};\n\nconst DEFAULT_CONFIG: Partial<TelemetryCollectorConfig> = {\n  samplingRate: 1,\n  maxBufferSize: 5,\n  // Production endpoint: https://clerk-telemetry.com\n  // Staging endpoint: https://staging.clerk-telemetry.com\n  // Local: http://localhost:8787\n  endpoint: 'https://clerk-telemetry.com',\n};\n\nexport class TelemetryCollector implements TelemetryCollectorInterface {\n  #config: Required<TelemetryCollectorConfig>;\n  #eventThrottler: TelemetryEventThrottler;\n  #metadata: TelemetryMetadata = {} as TelemetryMetadata;\n  #buffer: TelemetryEvent[] = [];\n  #pendingFlush: any;\n\n  constructor(options: TelemetryCollectorOptions) {\n    this.#config = {\n      maxBufferSize: options.maxBufferSize ?? DEFAULT_CONFIG.maxBufferSize,\n      samplingRate: options.samplingRate ?? DEFAULT_CONFIG.samplingRate,\n      disabled: options.disabled ?? false,\n      debug: options.debug ?? false,\n      endpoint: DEFAULT_CONFIG.endpoint,\n    } as Required<TelemetryCollectorConfig>;\n\n    if (!options.clerkVersion && typeof window === 'undefined') {\n      // N/A in a server environment\n      this.#metadata.clerkVersion = '';\n    } else {\n      this.#metadata.clerkVersion = options.clerkVersion ?? '';\n    }\n\n    // We will try to grab the SDK data lazily when an event is triggered, so it should always be defined once the event is sent.\n    this.#metadata.sdk = options.sdk!;\n    this.#metadata.sdkVersion = options.sdkVersion!;\n\n    this.#metadata.publishableKey = options.publishableKey ?? '';\n\n    const parsedKey = parsePublishableKey(options.publishableKey);\n    if (parsedKey) {\n      this.#metadata.instanceType = parsedKey.instanceType;\n    }\n\n    if (options.secretKey) {\n      // Only send the first 16 characters of the secret key to to avoid sending the full key. We can still query against the partial key.\n      this.#metadata.secretKey = options.secretKey.substring(0, 16);\n    }\n\n    this.#eventThrottler = new TelemetryEventThrottler();\n  }\n\n  get isEnabled(): boolean {\n    if (this.#metadata.instanceType !== 'development') {\n      return false;\n    }\n\n    // In browser or client environments, we most likely pass the disabled option to the collector, but in environments\n    // where environment variables are available we also check for `CLERK_TELEMETRY_DISABLED`.\n    if (this.#config.disabled || (typeof process !== 'undefined' && isTruthy(process.env.CLERK_TELEMETRY_DISABLED))) {\n      return false;\n    }\n\n    // navigator.webdriver is a property generally set by headless browsers that are running in an automated testing environment.\n    // Data from these environments is not meaningful for us and has the potential to produce a large volume of events, so we disable\n    // collection in this case. (ref: https://developer.mozilla.org/en-US/docs/Web/API/Navigator/webdriver)\n    if (typeof window !== 'undefined' && !!window?.navigator?.webdriver) {\n      return false;\n    }\n\n    return true;\n  }\n\n  get isDebug(): boolean {\n    return this.#config.debug || (typeof process !== 'undefined' && isTruthy(process.env.CLERK_TELEMETRY_DEBUG));\n  }\n\n  record(event: TelemetryEventRaw): void {\n    const preparedPayload = this.#preparePayload(event.event, event.payload);\n\n    this.#logEvent(preparedPayload.event, preparedPayload);\n\n    if (!this.#shouldRecord(preparedPayload, event.eventSamplingRate)) {\n      return;\n    }\n\n    this.#buffer.push(preparedPayload);\n\n    this.#scheduleFlush();\n  }\n\n  #shouldRecord(preparedPayload: TelemetryEvent, eventSamplingRate?: number) {\n    return this.isEnabled && !this.isDebug && this.#shouldBeSampled(preparedPayload, eventSamplingRate);\n  }\n\n  #shouldBeSampled(preparedPayload: TelemetryEvent, eventSamplingRate?: number) {\n    const randomSeed = Math.random();\n\n    if (this.#eventThrottler.isEventThrottled(preparedPayload)) {\n      return false;\n    }\n\n    return (\n      randomSeed <= this.#config.samplingRate &&\n      (typeof eventSamplingRate === 'undefined' || randomSeed <= eventSamplingRate)\n    );\n  }\n\n  #scheduleFlush(): void {\n    // On the server, we want to flush immediately as we have less guarantees about the lifecycle of the process\n    if (typeof window === 'undefined') {\n      this.#flush();\n      return;\n    }\n\n    const isBufferFull = this.#buffer.length >= this.#config.maxBufferSize;\n    if (isBufferFull) {\n      // If the buffer is full, flush immediately to make sure we minimize the chance of event loss.\n      // Cancel any pending flushes as we're going to flush immediately\n      if (this.#pendingFlush) {\n        const cancel = typeof cancelIdleCallback !== 'undefined' ? cancelIdleCallback : clearTimeout;\n        cancel(this.#pendingFlush);\n      }\n      this.#flush();\n      return;\n    }\n\n    // If we have a pending flush, do nothing\n    if (this.#pendingFlush) {\n      return;\n    }\n\n    if ('requestIdleCallback' in window) {\n      this.#pendingFlush = requestIdleCallback(() => {\n        this.#flush();\n      });\n    } else {\n      // This is not an ideal solution, but it at least waits until the next tick\n      this.#pendingFlush = setTimeout(() => {\n        this.#flush();\n      }, 0);\n    }\n  }\n\n  #flush(): void {\n    fetch(new URL('/v1/event', this.#config.endpoint), {\n      method: 'POST',\n      // TODO: We send an array here with that idea that we can eventually send multiple events.\n      body: JSON.stringify({\n        events: this.#buffer,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .catch(() => void 0)\n      .then(() => {\n        this.#buffer = [];\n      })\n      .catch(() => void 0);\n  }\n\n  /**\n   * If running in debug mode, log the event and its payload to the console.\n   */\n  #logEvent(event: TelemetryEvent['event'], payload: Record<string, any>) {\n    if (!this.isDebug) {\n      return;\n    }\n\n    if (typeof console.groupCollapsed !== 'undefined') {\n      console.groupCollapsed('[clerk/telemetry]', event);\n      console.log(payload);\n      console.groupEnd();\n    } else {\n      console.log('[clerk/telemetry]', event, payload);\n    }\n  }\n\n  /**\n   * If in browser, attempt to lazily grab the SDK metadata from the Clerk singleton, otherwise fallback to the initially passed in values.\n   *\n   * This is necessary because the sdkMetadata can be set by the host SDK after the TelemetryCollector is instantiated.\n   */\n  #getSDKMetadata() {\n    let sdkMetadata = {\n      name: this.#metadata.sdk,\n      version: this.#metadata.sdkVersion,\n    };\n\n    // @ts-expect-error -- The global window.Clerk type is declared in clerk-js, but we can't rely on that here\n    if (typeof window !== 'undefined' && window.Clerk) {\n      // @ts-expect-error -- The global window.Clerk type is declared in clerk-js, but we can't rely on that here\n      sdkMetadata = { ...sdkMetadata, ...window.Clerk.constructor.sdkMetadata };\n    }\n\n    return sdkMetadata;\n  }\n\n  /**\n   * Append relevant metadata from the Clerk singleton to the event payload.\n   */\n  #preparePayload(event: TelemetryEvent['event'], payload: TelemetryEvent['payload']): TelemetryEvent {\n    const sdkMetadata = this.#getSDKMetadata();\n\n    return {\n      event,\n      cv: this.#metadata.clerkVersion ?? '',\n      it: this.#metadata.instanceType ?? '',\n      sdk: sdkMetadata.name,\n      sdkv: sdkMetadata.version,\n      ...(this.#metadata.publishableKey ? { pk: this.#metadata.publishableKey } : {}),\n      ...(this.#metadata.secretKey ? { sk: this.#metadata.secretKey } : {}),\n      payload,\n    };\n  }\n}\n","import type { TelemetryEventRaw } from '@clerk/types';\n\nconst EVENT_COMPONENT_MOUNTED = 'COMPONENT_MOUNTED' as const;\nconst EVENT_SAMPLING_RATE = 0.1;\n\ntype ComponentMountedBase = {\n  component: string;\n};\n\ntype EventPrebuiltComponentMounted = ComponentMountedBase & {\n  appearanceProp: boolean;\n  elements: boolean;\n  variables: boolean;\n  baseTheme: boolean;\n};\n\ntype EventComponentMounted = ComponentMountedBase & {\n  [key: string]: boolean | string;\n};\n\n/**\n * Helper function for `telemetry.record()`. Create a consistent event object for when a prebuilt (AIO) component is mounted.\n *\n * @param component - The name of the component.\n * @param props - The props passed to the component. Will be filtered to a known list of props.\n *\n * @example\n * telemetry.record(eventPrebuiltComponentMounted('SignUp', props));\n */\nexport function eventPrebuiltComponentMounted(\n  component: string,\n  props?: Record<string, any>,\n): TelemetryEventRaw<EventPrebuiltComponentMounted> {\n  return {\n    event: EVENT_COMPONENT_MOUNTED,\n    eventSamplingRate: EVENT_SAMPLING_RATE,\n    payload: {\n      component,\n      appearanceProp: Boolean(props?.appearance),\n      baseTheme: Boolean(props?.appearance?.baseTheme),\n      elements: Boolean(props?.appearance?.elements),\n      variables: Boolean(props?.appearance?.variables),\n    },\n  };\n}\n\n/**\n * Helper function for `telemetry.record()`. Create a consistent event object for when a component is mounted. Use `eventPrebuiltComponentMounted` for prebuilt components.\n *\n * **Caution:** Filter the `props` you pass to this function to avoid sending too much data.\n *\n * @param component - The name of the component.\n * @param props - The props passed to the component. Ideally you only pass a handful of props here.\n *\n * @example\n * telemetry.record(eventComponentMounted('SignUp', props));\n */\nexport function eventComponentMounted(\n  component: string,\n  props: Record<string, string | boolean> = {},\n): TelemetryEventRaw<EventComponentMounted> {\n  return {\n    event: EVENT_COMPONENT_MOUNTED,\n    eventSamplingRate: EVENT_SAMPLING_RATE,\n    payload: {\n      component,\n      ...props,\n    },\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 374, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 394, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@clerk/backend/src/index.ts"],"sourcesContent":["import type { TelemetryCollectorOptions } from '@clerk/shared/telemetry';\nimport { TelemetryCollector } from '@clerk/shared/telemetry';\nimport type { SDKMetadata } from '@clerk/types';\n\nimport type { ApiClient, CreateBackendApiOptions } from './api';\nimport { createBackendApiClient } from './api';\nimport { withLegacyReturn } from './jwt/legacyReturn';\nimport type { CreateAuthenticateRequestOptions } from './tokens/factory';\nimport { createAuthenticateRequest } from './tokens/factory';\nimport { verifyToken as _verifyToken } from './tokens/verify';\n\nexport const verifyToken = withLegacyReturn(_verifyToken);\n\nexport type ClerkOptions = CreateBackendApiOptions &\n  Partial<\n    Pick<\n      CreateAuthenticateRequestOptions['options'],\n      'audience' | 'jwtKey' | 'proxyUrl' | 'secretKey' | 'publishableKey' | 'domain' | 'isSatellite'\n    >\n  > & { sdkMetadata?: SDKMetadata; telemetry?: Pick<TelemetryCollectorOptions, 'disabled' | 'debug'> };\n\n// The current exported type resolves the following issue in packages importing createClerkClient\n// TS4023: Exported variable 'clerkClient' has or is using name 'AuthErrorReason' from external module \"/packages/backend/dist/index\" but cannot be named.\nexport type ClerkClient = {\n  telemetry: TelemetryCollector;\n} & ApiClient &\n  ReturnType<typeof createAuthenticateRequest>;\n\nexport function createClerkClient(options: ClerkOptions): ClerkClient {\n  const opts = { ...options };\n  const apiClient = createBackendApiClient(opts);\n  const requestState = createAuthenticateRequest({ options: opts, apiClient });\n  const telemetry = new TelemetryCollector({\n    ...options.telemetry,\n    publishableKey: opts.publishableKey,\n    secretKey: opts.secretKey,\n    ...(opts.sdkMetadata ? { sdk: opts.sdkMetadata.name, sdkVersion: opts.sdkMetadata.version } : {}),\n  });\n\n  return {\n    ...apiClient,\n    ...requestState,\n    telemetry,\n  };\n}\n\n/**\n * General Types\n */\nexport type { OrganizationMembershipRole } from './api/resources';\nexport type { VerifyTokenOptions } from './tokens/verify';\n/**\n * JSON types\n */\nexport type {\n  AccountlessApplicationJSON,\n  ClerkResourceJSON,\n  TokenJSON,\n  AllowlistIdentifierJSON,\n  ClientJSON,\n  EmailJSON,\n  EmailAddressJSON,\n  ExternalAccountJSON,\n  IdentificationLinkJSON,\n  InvitationJSON,\n  OauthAccessTokenJSON,\n  OrganizationJSON,\n  OrganizationInvitationJSON,\n  PublicOrganizationDataJSON,\n  OrganizationMembershipJSON,\n  OrganizationMembershipPublicUserDataJSON,\n  PhoneNumberJSON,\n  RedirectUrlJSON,\n  SessionJSON,\n  SignInJSON,\n  SignInTokenJSON,\n  SignUpJSON,\n  SMSMessageJSON,\n  UserJSON,\n  VerificationJSON,\n  Web3WalletJSON,\n  DeletedObjectJSON,\n  PaginatedResponseJSON,\n  TestingTokenJSON,\n} from './api/resources/JSON';\n\n/**\n * Resources\n */\nexport type {\n  AccountlessApplication,\n  AllowlistIdentifier,\n  Client,\n  EmailAddress,\n  ExternalAccount,\n  Invitation,\n  OauthAccessToken,\n  Organization,\n  OrganizationInvitation,\n  OrganizationMembership,\n  OrganizationMembershipPublicUserData,\n  PhoneNumber,\n  Session,\n  SignInToken,\n  SMSMessage,\n  Token,\n  User,\n  TestingToken,\n} from './api/resources';\n\n/**\n * Webhooks event types\n */\nexport type {\n  UserWebhookEvent,\n  EmailWebhookEvent,\n  SMSWebhookEvent,\n  SessionWebhookEvent,\n  OrganizationWebhookEvent,\n  OrganizationMembershipWebhookEvent,\n  OrganizationInvitationWebhookEvent,\n  WebhookEvent,\n  WebhookEventType,\n} from './api/resources/Webhooks';\n\n/**\n * Auth objects\n */\nexport type { AuthObject } from './tokens/authObjects';\n"],"names":["verifyToken"],"mappings":";;;;;;;;;;;;;;;;;AAWO,IAAMA,eAAc,CAAA,GAAA,gKAAA,CAAA,mBAAA,EAAiB,gLAAA,CAAA,cAAY;AAiBjD,SAAS,kBAAkB,OAAA;IAChC,MAAM,OAAO;QAAE,GAAG,OAAA;IAAQ;IAC1B,MAAM,YAAY,CAAA,GAAA,gLAAA,CAAA,yBAAA,EAAuB;IACzC,MAAM,eAAe,CAAA,GAAA,gLAAA,CAAA,4BAAA,EAA0B;QAAE,SAAS;QAAM;IAAU;IAC1E,MAAM,YAAY,IAAI,uKAAA,CAAA,qBAAA,CAAmB;QACvC,GAAG,QAAQ,SAAA;QACX,gBAAgB,KAAK,cAAA;QACrB,WAAW,KAAK,SAAA;QAChB,GAAI,KAAK,WAAA,GAAc;YAAE,KAAK,KAAK,WAAA,CAAY,IAAA;YAAM,YAAY,KAAK,WAAA,CAAY,OAAA;QAAQ,IAAI,CAAC,CAAA;IACjG;IAEA,OAAO;QACL,GAAG,SAAA;QACH,GAAG,YAAA;QACH;IACF;AACF"}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@clerk/nextjs/src/server/createClerkClient.ts"],"sourcesContent":["import { createClerkClient } from '@clerk/backend';\n\nimport {\n  API_URL,\n  API_VERSION,\n  DOMAIN,\n  IS_SATELLITE,\n  PROXY_URL,\n  PUBLISHABLE_KEY,\n  SDK_METADATA,\n  SECRET_KEY,\n  TELEMETRY_DEBUG,\n  TELEMETRY_DISABLED,\n} from './constants';\n\nconst clerkClientDefaultOptions = {\n  secretKey: SECRET_KEY,\n  publishableKey: PUBLISHABLE_KEY,\n  apiUrl: API_URL,\n  apiVersion: API_VERSION,\n  userAgent: `${PACKAGE_NAME}@${PACKAGE_VERSION}`,\n  proxyUrl: PROXY_URL,\n  domain: DOMAIN,\n  isSatellite: IS_SATELLITE,\n  sdkMetadata: SDK_METADATA,\n  telemetry: {\n    disabled: TELEMETRY_DISABLED,\n    debug: TELEMETRY_DEBUG,\n  },\n};\n\nexport const createClerkClientWithOptions: typeof createClerkClient = options =>\n  createClerkClient({ ...clerkClientDefaultOptions, ...options });\n"],"names":[],"mappings":";;;;;;;;;AAeA,MAAM,4BAA4B;IAChC,WAAW,uKAAA,CAAA,aAAA;IACX,gBAAgB,uKAAA,CAAA,kBAAA;IAChB,QAAQ,uKAAA,CAAA,UAAA;IACR,YAAY,uKAAA,CAAA,cAAA;IACZ,WAAW,CAAA,EAAG,gBAAY,CAAA,EAAI,QAAe,CAAA;IAC7C,UAAU,uKAAA,CAAA,YAAA;IACV,QAAQ,uKAAA,CAAA,SAAA;IACR,aAAa,uKAAA,CAAA,eAAA;IACb,aAAa,uKAAA,CAAA,eAAA;IACb,WAAW;QACT,UAAU,uKAAA,CAAA,qBAAA;QACV,OAAO,uKAAA,CAAA,kBAAA;IACT;AACF;AAEO,MAAM,+BAAyD,CAAA,UACpE,CAAA,GAAA,oJAAA,CAAA,oBAAA,EAAkB;QAAE,GAAG,yBAAA;QAA2B,GAAG,OAAA;IAAQ"}},
    {"offset": {"line": 473, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@clerk/nextjs/src/server/keyless-node.ts"],"sourcesContent":["import type { AccountlessApplication } from '@clerk/backend';\nimport { logger } from '@clerk/shared/logger';\n\n/**\n * Attention: Only import this module when the node runtime is used.\n * We are using conditional imports to mitigate bundling issues with Next.js server actions on version prior to 14.1.0.\n */\n// @ts-ignore\nimport nodeRuntime from '#safe-node-apis';\n\nimport { createClerkClientWithOptions } from './createClerkClient';\n\n/**\n * The Clerk-specific directory name.\n */\nconst CLERK_HIDDEN = '.clerk';\n\n/**\n * The Clerk-specific lock file that is used to mitigate multiple key creation.\n * This is automatically cleaned up.\n */\nconst CLERK_LOCK = 'clerk.lock';\n\n/**\n * The `.clerk/` is NOT safe to be commited as it may include sensitive information about a Clerk instance.\n * It may include an instance's secret key and the secret token for claiming that instance.\n */\nfunction updateGitignore() {\n  if (!nodeRuntime.fs) {\n    throw \"Clerk: fsModule.fs is missing. This is an internal error. Please contact Clerk's support.\";\n  }\n  const { existsSync, writeFileSync, readFileSync, appendFileSync } = nodeRuntime.fs;\n\n  if (!nodeRuntime.path) {\n    throw \"Clerk: fsModule.path is missing. This is an internal error. Please contact Clerk's support.\";\n  }\n  const gitignorePath = nodeRuntime.path.join(process.cwd(), '.gitignore');\n  if (!existsSync(gitignorePath)) {\n    writeFileSync(gitignorePath, '');\n  }\n\n  // Check if `.clerk/` entry exists in .gitignore\n  const gitignoreContent = readFileSync(gitignorePath, 'utf-8');\n  if (!gitignoreContent.includes(CLERK_HIDDEN + '/')) {\n    appendFileSync(gitignorePath, `\\n${CLERK_HIDDEN}/\\n`);\n  }\n}\n\nconst generatePath = (...slugs: string[]) => {\n  if (!nodeRuntime.path) {\n    throw \"Clerk: fsModule.path is missing. This is an internal error. Please contact Clerk's support.\";\n  }\n  return nodeRuntime.path.join(process.cwd(), CLERK_HIDDEN, ...slugs);\n};\n\nconst _TEMP_DIR_NAME = '.tmp';\nconst getKeylessConfigurationPath = () => generatePath(_TEMP_DIR_NAME, 'keyless.json');\nconst getKeylessReadMePath = () => generatePath(_TEMP_DIR_NAME, 'README.md');\n\nlet isCreatingFile = false;\n\nfunction safeParseClerkFile(): AccountlessApplication | undefined {\n  if (!nodeRuntime.fs) {\n    throw \"Clerk: fsModule.fs is missing. This is an internal error. Please contact Clerk's support.\";\n  }\n  const { readFileSync } = nodeRuntime.fs;\n  try {\n    const CONFIG_PATH = getKeylessConfigurationPath();\n    let fileAsString;\n    try {\n      fileAsString = readFileSync(CONFIG_PATH, { encoding: 'utf-8' }) || '{}';\n    } catch {\n      fileAsString = '{}';\n    }\n    return JSON.parse(fileAsString) as AccountlessApplication;\n  } catch {\n    return undefined;\n  }\n}\n\nconst createMessage = (keys: AccountlessApplication) => {\n  return `\\n\\x1b[35m\\n[Clerk]:\\x1b[0m You are running on keyless mode.\\nYou can \\x1b[35mclaim your keys\\x1b[0m by visiting ${keys.claimUrl}\\n`;\n};\n\nasync function createOrReadKeyless(): Promise<AccountlessApplication | undefined> {\n  if (!nodeRuntime.fs) {\n    // This should never happen.\n    throw \"Clerk: fsModule.fs is missing. This is an internal error. Please contact Clerk's support.\";\n  }\n  const { existsSync, writeFileSync, mkdirSync, rmSync } = nodeRuntime.fs;\n\n  /**\n   * If another request is already in the process of acquiring keys return early.\n   * Using both an in-memory and file system lock seems to be the most effective solution.\n   */\n  if (isCreatingFile || existsSync(CLERK_LOCK)) {\n    return undefined;\n  }\n\n  isCreatingFile = true;\n\n  writeFileSync(\n    CLERK_LOCK,\n    // In the rare case, the file persists give the developer enough context.\n    'This file can be deleted. Please delete this file and refresh your application',\n    {\n      encoding: 'utf8',\n      mode: '0777',\n      flag: 'w',\n    },\n  );\n\n  const CONFIG_PATH = getKeylessConfigurationPath();\n  const README_PATH = getKeylessReadMePath();\n\n  mkdirSync(generatePath(_TEMP_DIR_NAME), { recursive: true });\n  updateGitignore();\n\n  /**\n   * When the configuration file exists, always read the keys from the file\n   */\n  const envVarsMap = safeParseClerkFile();\n  if (envVarsMap?.publishableKey && envVarsMap?.secretKey) {\n    isCreatingFile = false;\n    rmSync(CLERK_LOCK, { force: true, recursive: true });\n\n    /**\n     * Notify developers.\n     */\n    logger.logOnce(createMessage(envVarsMap));\n\n    return envVarsMap;\n  }\n\n  /**\n   * At this step, it is safe to create new keys and store them.\n   */\n  const client = createClerkClientWithOptions({});\n  const accountlessApplication = await client.__experimental_accountlessApplications.createAccountlessApplication();\n\n  /**\n   * Notify developers.\n   */\n  logger.logOnce(createMessage(accountlessApplication));\n\n  writeFileSync(CONFIG_PATH, JSON.stringify(accountlessApplication), {\n    encoding: 'utf8',\n    mode: '0777',\n    flag: 'w',\n  });\n\n  // TODO-KEYLESS: Add link to official documentation.\n  const README_NOTIFICATION = `\n## DO NOT COMMIT\nThis directory is auto-generated from \\`@clerk/nextjs\\` because you are running on Keyless mode. Avoid committing the \\`.clerk/\\` directory as it includes the secret key of the unclaimed instance.\n  `;\n\n  writeFileSync(README_PATH, README_NOTIFICATION, {\n    encoding: 'utf8',\n    mode: '0777',\n    flag: 'w',\n  });\n\n  /**\n   * Clean up locks.\n   */\n  rmSync(CLERK_LOCK, { force: true, recursive: true });\n  isCreatingFile = false;\n\n  return accountlessApplication;\n}\n\nexport { createOrReadKeyless };\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 605, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}